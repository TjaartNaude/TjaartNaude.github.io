"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const config_1 = require("./config");
const storage_limit_control_1 = require("./plugins/storage-limit-control");
const browser_control_utils_1 = require("./utils/browser-control.utils");
let options = {};
exports.default = {
    config: (configOptions) => {
        if (configOptions) {
            options = configOptions;
        }
    },
    init: (store) => {
        if ((0, browser_control_utils_1.isOnClient)()) {
            const storage = window === null || window === void 0 ? void 0 : window.localStorage;
            const setStorage = (payload) => __awaiter(void 0, void 0, void 0, function* () {
                const isBelowLimit = yield (0, storage_limit_control_1.storageLimitControl)(String(payload));
                if (isBelowLimit) {
                    storage.setItem((0, config_1.getStorageKey)(options), JSON.stringify(payload));
                }
            });
            const removeStorage = () => {
                storage.removeItem((0, config_1.getStorageKey)(options));
            };
            const getStorage = () => {
                return JSON.parse(storage.getItem((0, config_1.getStorageKey)(options)));
            };
            const replaceState = () => {
                const storedState = getStorage();
                if (storedState && typeof storedState === "object") {
                    if (options.paths) {
                        const filteredState = store.state;
                        options.paths.forEach((module, key) => {
                            var _a;
                            filteredState[module] = storedState[module];
                            if (((_a = options.paths) === null || _a === void 0 ? void 0 : _a.length) === key + 1) {
                                store.replaceState(filteredState);
                            }
                        });
                        return;
                    }
                    store.replaceState(storedState);
                }
            };
            store.subscribe((_, state) => {
                removeStorage();
                if (options.paths) {
                    const payload = {};
                    options.paths.forEach((module, key) => {
                        var _a;
                        payload[module] = state[module];
                        if (((_a = options.paths) === null || _a === void 0 ? void 0 : _a.length) === key + 1) {
                            setStorage(payload);
                        }
                    });
                    return;
                }
                setStorage(state);
            });
            replaceState();
        }
    },
};
